require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

describe ProvidersController do
#  before do
#    login_admin
#  end

  # This should return the minimal set of attributes required to create a valid
  # Provider. As you add validations to Provider, be sure to
  # update the return value of this method accordingly.
  def valid_attributes
    {}
  end

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # ProvidersController. Be sure to keep this updated too.
  def valid_session
    {}
  end

  describe "GET index" do
    context "When user is not signed in" do
      it "should redirect to signin screen" do
        get :index
        expect(response).to redirect_to(new_user_session_path)
      end
    end

    context "When user is signed in but not admin" do
      before do
        login_user
      end

      it "should redirect to root screen" do
        get :index
        expect(response).to redirect_to(root_path)
      end

      after do
        sign_out :user
      end
    end

    context "When user is signed in" do
      before do
        login_admin
      end

      it "responds successfully with on HTTP 200 status code" do
        get :index
        expect(response).to be_success
        expect(response.code).to eq("200")
      end

      it "assigns all providers as @providers" do
        provider = Provider.create! valid_attributes
        get :index
        assigns(:providers).should eq([provider])
      end

      it "renders the index template" do
        get :index
        expect(response).to render_template("index")
      end

      after do
        sign_out :user
      end
    end
  end

  describe "GET show" do
    context "When user is not signed in" do
      it "should redirect to signin screen" do
        provider = Provider.create! valid_attributes
        get :show, {:id => provider.to_param}, valid_session
        expect(response).to redirect_to(new_user_session_path)
      end
    end

    context "When user is signed in but not admin" do
      before do
        login_user
      end

      it "should redirect to root screen" do
        provider = Provider.create! valid_attributes
        get :show, {:id => provider.to_param}, valid_session
        expect(response).to redirect_to(root_path)
      end

      after do
        sign_out :user
      end
    end

    context "When user is signed in" do
      before do
        login_admin
      end

      it "responds successfully with on HTTP 200 status code" do
        provider = Provider.create! valid_attributes
        get :show, {:id => provider.to_param}, valid_session
        expect(response).to be_success
        expect(response.code).to eq("200")
      end

      it "assigns the requested provider as @provider" do
        provider = Provider.create! valid_attributes
        get :show, {:id => provider.to_param}, valid_session
        assigns(:provider).should eq(provider)
      end

      it "renders the show template" do
        provider = Provider.create! valid_attributes
        get :show, {:id => provider.to_param}, valid_session
        expect(response).to render_template("show")
      end

      after do
        sign_out :user
      end
    end
  end

  describe "GET new" do
    context "When user is not signed in" do
      it "should redirect to signin screen" do
        get :new, {}, valid_session
        expect(response).to redirect_to(new_user_session_path)
      end
    end

    context "When user is signed in but not admin" do
      before do
        login_user
      end

      it "should redirect to root screen" do
        get :new, {}, valid_session
        expect(response).to redirect_to(root_path)
      end

      after do
        sign_out :user
      end
    end

    context "When user is signed in" do
      before do
        login_admin
      end

      it "responds successfully with on HTTP 200 status code" do
        get :new, {}, valid_session
        expect(response).to be_success
        expect(response.code).to eq("200")
      end

      it "assigns a new provider as @provider" do
        get :new, {}, valid_session
        assigns(:provider).should be_a_new(Provider)
      end

      it "renders the new template" do
        get :new, {}, valid_session
        expect(response).to render_template("new")
      end

      after do
        sign_out :user
      end
    end
  end

  describe "GET edit" do
    context "When user is not signed in" do
      it "should redirect to signin screen" do
        provider = Provider.create! valid_attributes
        get :edit, {:id => provider.to_param}, valid_session
        expect(response).to redirect_to(new_user_session_path)
      end
    end

    context "When user is signed in but not admin" do
      before do
        login_user
      end

      it "should redirect to root screen" do
        provider = Provider.create! valid_attributes
        get :edit, {:id => provider.to_param}, valid_session
        expect(response).to redirect_to(root_path)
      end

      after do
        sign_out :user
      end
    end

    context "When user is signed in" do
      before do
        login_admin
      end

      it "responds successfully with on HTTP 200 status code" do
        provider = Provider.create! valid_attributes
        get :edit, {:id => provider.to_param}, valid_session
        expect(response).to be_success
        expect(response.code).to eq("200")
      end

      it "assigns the requested provider as @provider" do
        provider = Provider.create! valid_attributes
        get :edit, {:id => provider.to_param}, valid_session
        assigns(:provider).should eq(provider)
      end

      it "renders the show template" do
        provider = Provider.create! valid_attributes
        get :edit, {:id => provider.to_param}, valid_session
        expect(response).to render_template("edit")
      end

      after do
        sign_out :user
      end
    end
  end

  describe "POST create" do
    context "When user is not signed in" do
      it "should redirect to signin screen" do
        post :create, {:provider => valid_attributes}, valid_session
        expect(response).to redirect_to(new_user_session_path)
      end
    end

    context "When user is signed in but not admin" do
      before do
        login_user
      end

      it "should redirect to root screen" do
        post :create, {:provider => valid_attributes}, valid_session
        expect(response).to redirect_to(root_path)
      end

      after do
        sign_out :user
      end
    end

    context "When user is signed in" do
      before do
        login_admin
      end

      describe "with valid params" do
        it "creates a new Provider" do
          expect {
            post :create, {:provider => valid_attributes}, valid_session
          }.to change(Provider, :count).by(1)
        end

        it "assigns a newly created provider as @provider" do
          post :create, {:provider => valid_attributes}, valid_session
          assigns(:provider).should be_a(Provider)
          assigns(:provider).should be_persisted
        end

        it "redirects to the created provider" do
          post :create, {:provider => valid_attributes}, valid_session
          response.should redirect_to(Provider.last)
        end
      end

      describe "with invalid params" do
        it "assigns a newly created but unsaved provider as @provider" do
          # Trigger the behavior that occurs when invalid params are submitted
          Provider.any_instance.stub(:save).and_return(false)
          post :create, {:provider => {}}, valid_session
          assigns(:provider).should be_a_new(Provider)
        end

        it "re-renders the 'new' template" do
          # Trigger the behavior that occurs when invalid params are submitted
          Provider.any_instance.stub(:save).and_return(false)
          post :create, {:provider => {}}, valid_session
          response.should render_template("new")
        end
      end
    end
  end

  describe "PUT update" do
    context "When user is not signed in" do
      it "should redirect to signin screen" do
        provider = Provider.create! valid_attributes
        put :update, {:id => provider.to_param, :provider => {'these' => 'params'}}, valid_session

        expect(response).to redirect_to(new_user_session_path)
      end
    end

    context "When user is signed in but not admin" do
      before do
        login_user
      end

      it "should redirect to root screen" do
        provider = Provider.create! valid_attributes
        put :update, {:id => provider.to_param, :provider => {'these' => 'params'}}, valid_session
        expect(response).to redirect_to(root_path)
      end

      after do
        sign_out :user
      end
    end

    context "When user is signed in" do
      before do
        login_admin
      end

      describe "with valid params" do
        it "updates the requested provider" do
          provider = Provider.create! valid_attributes
          # Assuming there are no other providers in the database, this
          # specifies that the Provider created on the previous line
          # receives the :update_attributes message with whatever params are
          # submitted in the request.
          Provider.any_instance.should_receive(:update_attributes).with({'these' => 'params'})
          put :update, {:id => provider.to_param, :provider => {'these' => 'params'}}, valid_session
        end

        it "assigns the requested provider as @provider" do
          provider = Provider.create! valid_attributes
          put :update, {:id => provider.to_param, :provider => valid_attributes}, valid_session
          assigns(:provider).should eq(provider)
        end

        it "redirects to the provider" do
          provider = Provider.create! valid_attributes
          put :update, {:id => provider.to_param, :provider => valid_attributes}, valid_session
          response.should redirect_to(provider)
        end
      end

      describe "with invalid params" do
        it "assigns the provider as @provider" do
          provider = Provider.create! valid_attributes
          # Trigger the behavior that occurs when invalid params are submitted
          Provider.any_instance.stub(:save).and_return(false)
          put :update, {:id => provider.to_param, :provider => {}}, valid_session
          assigns(:provider).should eq(provider)
        end

        it "re-renders the 'edit' template" do
          provider = Provider.create! valid_attributes
          # Trigger the behavior that occurs when invalid params are submitted
          Provider.any_instance.stub(:save).and_return(false)
          put :update, {:id => provider.to_param, :provider => {}}, valid_session
          response.should render_template("edit")
        end
      end
    end
  end

  describe "DELETE destroy" do
    context "When user is not signed in" do
      it "should redirect to signin screen" do
        provider = Provider.create! valid_attributes
        delete :destroy, {:id => provider.to_param}, valid_session
        expect(response).to redirect_to(new_user_session_path)
      end
    end

    context "When user is signed in but not admin" do
      before do
        login_user
      end

      it "should redirect to root screen" do
        provider = Provider.create! valid_attributes
        delete :destroy, {:id => provider.to_param}, valid_session
        expect(response).to redirect_to(root_path)
      end

      after do
        sign_out :user
      end
    end

    context "When user is signed in" do
      before do
        login_admin
      end

      it "destroys the requested provider" do
        provider = Provider.create! valid_attributes
        expect {
          delete :destroy, {:id => provider.to_param}, valid_session
        }.to change(Provider, :count).by(-1)
      end

      it "redirects to the providers list" do
        provider = Provider.create! valid_attributes
        delete :destroy, {:id => provider.to_param}, valid_session
        response.should redirect_to(providers_url)
      end
    end
  end

end
